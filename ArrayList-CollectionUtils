           //提取符合条件的对象
           List<SysDictData> filterParentId = data.stream().filter(item -> parentId.equals(item.getParentId())).collect(Collectors.toList());
           
           //将list对象转为另一个list对象
           List<SysAreaExportFloor> floorList=new ArrayList<>();
           positionList.removeAll(Collections.singletonList(null));//去除list中所有空对象
           List<SysArea> list = floorList.stream().map(SysArea::new).collect(Collectors.toList());

           //list排序重组
           list.sort(new Comparator<MonitorVo>() {
                @Override
                public int compare(MonitorVo o1, MonitorVo o2) {
                    return (int) (o1.getDeviceId() - o2.getDeviceId());
                }
            });

           
           List<Menu> menus= new ArrayList<>();
           //将对象中supplyDayId属性提取为set
           Set<Long> result = menus.stream().map(Menu->Menu.getSupplyDayId()).collect(Collectors.toSet());
            List<List<Menu>> list = new ArrayList<>();
            for (Long dayId : result) {
                List<Menu> arrayList = new ArrayList<>();
           //将满足条件的对象提取到新的list里
                arrayList = (List<Menu>) CollectionUtils.select(menus,
                        arg0 -> {
                            Menu menu1 = null;
                            if (arg0 instanceof Menu) {
                                menu1 = (Menu) arg0;
                            }
                            if (menu1.getSupplyDayId()==dayId){
                                return true;
                            }
                            return false;
                        });
                if (arrayList.size()>0){
                    list.add(arrayList);
                }
            }



